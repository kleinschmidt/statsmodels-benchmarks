#+BEGIN_SRC elisp
  (setq org-babel-default-header-args:jupyter-julia '((:async . "yes") 
                                                      (:session . "jl")
                                                      (:kernel . "julia-1.3")))
#+END_SRC

#+RESULTS:
: ((:async . yes) (:session . jl) (:kernel . julia-1.3))

#+TITLE: StatsModels.jl benchmarks



* Function terms: anonymous functions or ~Call{func}~?

Lyndon proposed getting rid of the anonymous functions in ~FunctionTerm~
altogether and just using a type parameter to capture the called function.

** Call term struct

This stores the function as an argument.

#+begin_src jupyter-julia
  struct CallTerm{F,Args}
      func::F
      args::Args
  end

  Base.broadcastable(ct::CallTerm) = ct

  call(x, data) = x
  call(name::Symbol, data) = getproperty(data, name)
  function call(ct::CallTerm, data)
      # args = (call(arg, data) for arg in ct.args)
      # ct.func.(args...)
      ct.func.(call.(ct.args, Ref(data))...)
  end

  ct1 = CallTerm(+, (1, :a, :b))

  data = (a=rand(10), b=rand(10))
  call(ct1, data)
#+end_src

#+RESULTS:
#+begin_example
  10-element Array{Float64,1}:
   1.1792999600963043
   1.2710129082266919
   1.2287076973621287
   2.4255214452177745
   1.3116690064421908
   1.6815030589382687
   2.1444023555800333
   1.1406251036294992
   1.7514612300275927
   1.528130509327061 
#+end_example

#+begin_src jupyter-julia
  ct2 = CallTerm(log, (ct1, ))
  call(ct2, data)
#+end_src

#+RESULTS:
#+begin_example
  10-element Array{Float64,1}:
   0.1649210082770228 
   0.23981414811695084
   0.2059629645109199 
   0.8860465302298175 
   0.27130037701836274
   0.5196880713688601 
   0.762860891450419  
   0.1315764486419747 
   0.5604504281135797 
   0.42404509896020304
#+end_example

We need a macro the converts an AST into a tree of ~CallTerm~:

#+begin_src jupyter-julia

  macro call(ast)
      esc(_call(ast))
  end

  _call(x) = x
  _call(s::Symbol) = Meta.quot(s)
  function _call(ex::Expr)
      ex.head == :call || error("non-call expression encountered")

      args_out = [:CallTerm, ex.args[1], Expr(:tuple)]
      for arg in ex.args[2:end]
          push!(args_out[end].args,
                _call(arg))
      end

      Expr(:call, args_out...)
  end

  ct3 = @call(log(1+a+b))
  call(ct3, data)
#+end_src

#+RESULTS:
#+begin_example
  10-element Array{Float64,1}:
   0.1649210082770228 
   0.23981414811695084
   0.2059629645109199 
   0.8860465302298175 
   0.27130037701836274
   0.5196880713688601 
   0.762860891450419  
   0.1315764486419747 
   0.5604504281135797 
   0.42404509896020304
#+end_example

** COMMENT Anonymous function

This is basically what statsmodels does now: create an anonymous function with
the same arguments...

#+begin_src jupyter-julia

  AnonTerm(f::F, names::NTuple{N,Symbol}) where {F,N} =
      AnonTerm{F, names}(f, names)

  call(at::AnonTerm{F,Names}, data) where {F,Names} =
      at.f.(getproperty.(Ref(data), Names)...)

  at = AnonTerm((a,b) -> 1+a+b, (:a, :b))
  call(at, data)
#+end_src

#+RESULTS:
#+begin_example
  10-element Array{Float64,1}:
   1.1792999600963043
   1.2710129082266919
   1.2287076973621287
   2.4255214452177745
   1.3116690064421908
   1.6815030589382687
   2.1444023555800333
   1.1406251036294992
   1.7514612300275927
   1.528130509327061 
#+end_example

To construct one from an expression:

#+begin_src jupyter-julia

  extract_syms(ex::Expr) = mapreduce(extract_syms, union, ex.args[2:end])
  extract_syms(x::Symbol) = (x, )
  extract_syms(x) = ()

  extract_syms(:(1 + a + b))

  struct AnonTerm{F,Names}
      f::F
      names
  end


  function _anon(ex::Expr)
      syms = extract_syms(ex)
      func = Expr(:->, Expr(:tuple, syms...), ex)
      Expr(:call, :AnonTerm, func, Expr(:tuple, Meta.quot.(syms)...))
  end

  macro anon(ast)
      _anon(ast)
  end

  call(@anon(log(1+a+b)), data)
#+end_src

#+RESULTS:
#+begin_example
  10-element Array{Float64,1}:
   0.1649210082770228 
   0.23981414811695084
   0.2059629645109199 
   0.8860465302298175 
   0.27130037701836274
   0.5196880713688601 
   0.762860891450419  
   0.1315764486419747 
   0.5604504281135797 
   0.42404509896020304
#+end_example
